version: '3.8'

services:
  # 主应用服务
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: wz-workflow-app
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=/app/backend/data/database.sqlite
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3001}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      # 持久化数据目录
      - app_data:/app/backend/data
      - app_logs:/app/backend/logs
      - app_uploads:/app/backend/uploads
    networks:
      - wz_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: wz-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wz_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-wzredis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: wz-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - wz_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # 日志收集服务（可选）
  logrotate:
    image: alpine:latest
    container_name: wz-logrotate
    restart: unless-stopped
    volumes:
      - app_logs:/logs
      - nginx_logs:/nginx_logs
    command: >
      sh -c "
        while true; do
          find /logs -name '*.log' -size +100M -exec truncate -s 50M {} \;
          find /nginx_logs -name '*.log' -size +100M -exec truncate -s 50M {} \;
          sleep 3600
        done
      "
    networks:
      - wz_network

# 数据卷
volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/data
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/logs
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/uploads
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# 网络
networks:
  wz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

