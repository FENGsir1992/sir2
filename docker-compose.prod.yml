version: '3.8'

services:
  # 主应用服务
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: wz-workflow-app-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=/app/backend/data/database.sqlite
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=info
      - CORS_ORIGIN=${CORS_ORIGIN}
    volumes:
      - ./docker/data:/app/backend/data
      - ./docker/logs:/app/backend/logs
      - ./docker/uploads:/app/backend/uploads
    networks:
      - wz_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: wz-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - wz_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: wz-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - wz_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 监控服务 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: wz-prometheus
    restart: always
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wz_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: wz-grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - wz_network
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 日志收集和轮转
  logrotate:
    image: alpine:latest
    container_name: wz-logrotate-prod
    restart: always
    volumes:
      - ./docker/logs:/logs
      - nginx_logs:/nginx_logs
    command: >
      sh -c "
        apk add --no-cache logrotate
        echo '0 2 * * * /usr/sbin/logrotate /etc/logrotate.conf' | crontab -
        while true; do
          find /logs -name '*.log' -size +100M -exec truncate -s 50M {} \;
          find /nginx_logs -name '*.log' -size +100M -exec truncate -s 50M {} \;
          sleep 3600
        done
      "
    networks:
      - wz_network

# 数据卷
volumes:
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络
networks:
  wz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

